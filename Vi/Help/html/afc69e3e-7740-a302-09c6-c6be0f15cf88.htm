<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Logger Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Logger class" /><meta name="System.Keywords" content="Vi.Logger class" /><meta name="System.Keywords" content="Logger class, about Logger class" /><meta name="Microsoft.Help.F1" content="Vi.Logger" /><meta name="Microsoft.Help.Id" content="T:Vi.Logger" /><meta name="Description" content="Exposes methods to log and format messages: Debug; Info; Warn; Error; Fatal; Format." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Vi" /><meta name="file" content="afc69e3e-7740-a302-09c6-c6be0f15cf88" /><meta name="guid" content="afc69e3e-7740-a302-09c6-c6be0f15cf88" /><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Help Document created with Sandcastle.<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="3c9c09ed-7f8e-4b02-84e8-bd7948586fcb.htm" title="Help Document created with Sandcastle." tocid="roottoc">Help Document created with Sandcastle.</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="b082bfcb-a209-9ce6-a1a2-6fc7c104631a.htm" title="Vi" tocid="b082bfcb-a209-9ce6-a1a2-6fc7c104631a">Vi</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="afc69e3e-7740-a302-09c6-c6be0f15cf88.htm" title="Logger Class" tocid="afc69e3e-7740-a302-09c6-c6be0f15cf88">Logger Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="95e88865-81f5-3332-bbce-e273fdaa9bc9.htm" title="Logger Constructor " tocid="95e88865-81f5-3332-bbce-e273fdaa9bc9">Logger Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="57d5c53d-bce2-c9fd-e316-678d1c23f04c.htm" title="Logger Fields" tocid="57d5c53d-bce2-c9fd-e316-678d1c23f04c">Logger Fields</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="ebe02c04-6c34-e2dd-b9ff-8f047fbb1a65.htm" title="Logger Methods" tocid="ebe02c04-6c34-e2dd-b9ff-8f047fbb1a65">Logger Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Logger Class</td></tr></table><span class="introStyle"></span><div class="summary">
            Exposes  methods  to log and format messages: Debug; Info; Warn; Error; Fatal; Format.    
            </div><div class="summary"><img src="\Logger\Images\Logger.png" style="margin: 15px 0px 15px 0px;" /><p style="Padding: 15px 0px 0px 0px;line-height: 150%;">
        This class is a '<b>presentation layer</b>' wrapped arount the object (an instace of the class Vi.Log4Vi.Logger) provided by the method <b>SetLogger</b>. 
        Vi.Logger (this class) exhibits an enhanced set of the classic log methods to improve, as much as possible, the user experience (the developer in this case).        
      </p><p style="Padding: 15px 0px 0px 0px;line-height: 150%;">
        The responsibility to 'write' the log belongs to the object supplied to this class by the method SetLogger and it is obvious that how the log is implemented doesn't matter to this class.<br />

        This 'architecture'. is a way to implement a '<b>dependency injection</b>' and 'abstracts' toward the log process, giving:
        <ul><li>
            the freedom to <b>choose and change</b> in any moment the implementation of the logging process between: file system; event viewer; Console, DB; ... . <br /></li><li>
            a 'global', static and <b>easy to use</b> method to log messages.
          </li></ul><span style="font-style: italic;font-size: 90%">
          For example, during the development of a class library it is normal, for the developer, write also a very simple GUI (to interact and test the class library).
          The hassle is that (normally) the class library 'writes' to the Console. Instead, working with a GUI is easier to have the message directly on the window form.
          with this class <b>the switch takes just one line of code</b>, and affects not only the GUI but also the class library (Thus, since the class library is hosted within the GUI, it writes to the 'screen'. When the host change, change also the destination for the log.).
        </span></p><p style="Padding: 15px 0px 0px 0px;line-height: 150%;">
        The advantages, this solution brings, are:
        <ol><li><b>Sets a standard for the company</b>: It is common experience that every developer has its own "style" when writes logs. This shouldn't happen (especially in a well structured company.)
          </li><li><b>Removes the dependency on the specific logging tool</b> adopted: the developer doesn't need to know, how the log is performed. The way logs are 'written' can change at any time (file system; event viewer; DB; screen; ...) .
          </li><li><b>Simplicity</b>: Log4Net is a very powerful tool: just 'plug &amp; forget'. Its drawback is the 'configuration' (by my experience make it run is a nightmare.) This class removes this problem. 
          </li></ol></p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LST4F20400B_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4F20400B_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Vi<span id="LST4F20400B_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4F20400B_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Logger</span><br /></div><p> </p><strong>Namespace:</strong> <a href="b082bfcb-a209-9ce6-a1a2-6fc7c104631a.htm">Vi</a><br /><strong>Assembly:</strong> Vi (in Vi.dll) Version: 1.0.0.0 (1.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cs','1','4');return false;">C#</a></div><div id="ID1EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','vb','2','4');return false;">VB</a></div><div id="ID1EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','cpp','3','4');return false;">C++</a></div><div id="ID1EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EDCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">Logger</span></pre></div><div id="ID1EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">Logger</span></pre></div><div id="ID1EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Logger</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></pre></div><div id="ID1EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">AbstractClassAttribute</span>&gt;]
[&lt;<span class="identifier">SealedAttribute</span>&gt;]
<span class="keyword">type</span> <span class="identifier">Logger</span> =  <span class="keyword">class</span> <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EDCA");</script></div><p>The <span class="selflink">Logger</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="private;static;declared;notNetfw;"><td><img src="../icons/privmethod.gif" alt="Private method" title="Private method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="95e88865-81f5-3332-bbce-e273fdaa9bc9.htm">Logger</a></td><td /></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="4fa2e1f5-b12b-4f0a-7cbd-cad9d13549fa.htm">Debug(Int32, String, String)</a></td><td><div class="summary">
            Call this method to reach the Format method 'Debug().Format(...)';
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="0d924831-8e0c-e3c6-b6e5-6e11844f0c17.htm">Debug(String, Int32, String, String)</a></td><td><div class="summary">
            This is the most verbose logging level (maximum volume setting). Debug should be out-of-bounds for a production system and used only for development and testing.
            Logs a 'Debug in the log file if skepDebug (in config file) is false.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="9fe5b312-179f-0e1e-6895-43a594b4db77.htm">Error</a></td><td><div class="summary">
            Error is used to log all unhandled exceptions. This is typically logged inside a catch block at the boundary of your application.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="ad88c7e4-63f2-cfe4-4471-3c103874b080.htm">Fatal(Int32, String, String)</a></td><td><div class="summary">
            Fatal is reserved for special exceptions/conditions where it is imperative that you can quickly pick out these events. Fatal should to be used early in an application's development. It's usually only with experience it is possible identify situations worthy of the FATAL moniker experience do specific events become worth of promotion to Fatal. After all, an error's an error.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="7b43e4ff-124d-6c20-7fbf-97de5046a0e4.htm">Fatal(String, Int32, String, String)</a></td><td><div class="summary">
            Fatal is reserved for special exceptions/conditions where it is imperative that you can quickly pick out these events. Fatal should to be used early in an application's development. It's usually only with experience it is possible identify situations worthy of the FATAL moniker experience do specific events become worth of promotion to Fatal. After all, an error's an error.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="4f4713c7-bbe3-ffcc-dca5-42bfe9a69bb3.htm">GetLogger</a></td><td><div class="summary">
            Gives back the 'Logger' currently used. This method is defined to avoid direct access to this 'logger'
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="7fc2b2cf-4f0e-5920-73fc-3919bf2d8f68.htm">Info(Int32, String, String)</a></td><td><div class="summary">
            Use this overload to 'Format' a message like the method 'System.String.Format'. The sintax is: Info().Format(string format, params object[] args).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="f124f41a-9c25-b177-3c2a-d29c43b2836b.htm">Info(String, Int32, String, String)</a></td><td><div class="summary">
            The 'Info' level is typically used to output information that is useful to the running and management of your system (production). 'Info' would also be the level used to log Entry and Exit points in key areas of your application. However, you may choose to add more entry and exit points at Debug level for more granularity during development and testing.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="fe9ae046-ae46-f165-ef4e-50f4f0cd840f.htm">SetLogger</a></td><td><div class="summary">
            Assign the provided logger to this class (Vi.Logger). By default this class uses a 'fake' logger that does logs nothing.
            After this assignment, every log will be managed by the provided class. This class in made with Log4Net in mind, but any other way to log can used.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="637060f2-2c7d-6afb-5b81-579a184641b4.htm">Warn(Int32, String, String)</a></td><td><div class="summary">
            Warning is often used for handled 'exceptions' or other important log events. For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="e5f7e82a-2064-1872-cc48-80f88530a468.htm">Warn(String, Int32, String, String)</a></td><td><div class="summary">
            Warning is often used for handled 'exceptions' or other important log events. For example, if your application requires a configuration setting but has a default in case the setting is missing, then the Warning level should be used to log the missing configuration setting.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="bed2069f-d6f4-e2e0-e97c-2ce8471b0064.htm">Write(Exception, Int32, String, String)</a></td><td><div class="summary">
            The same as Error(). (defined only for consinstency.)
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="ef458e74-f111-f6fb-1365-22d2a3eda400.htm">Write(Logger<span id="LST4F20400B_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4F20400B_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Levels, Int32, String, String)</a></td><td><div class="summary">
            Writes one of the log method based on level.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="2caafe98-74cf-359e-37e9-732bebc27b00.htm">Write(String, Logger<span id="LST4F20400B_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4F20400B_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Levels, Int32, String, String)</a></td><td><div class="summary">
            Writes one of the log method based on level.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Fields</span></div><div id="ID5RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="private;static;declared;notNetfw;"><td><img src="../icons/privfield.gif" alt="Private field" title="Private field" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="6559fe52-3569-e53f-b6d7-db427e15a180.htm">_Logger</a></td><td><div class="summary">
            The object effectively used to execute the log. By default is a 'Fake' log (an empty class that does not writes anything). To assigne a true Log object use the method 'SetLogger'. 
            It is not public to avoid misuse like: Logger._Logger.Debug(...).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubfield.gif" alt="Public field" title="Public field" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="97ada89b-b181-7c26-5213-93e9a2cd83f9.htm">SkipDebug</a></td><td><div class="summary">
            If true 'Debug' will not be traced.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="b082bfcb-a209-9ce6-a1a2-6fc7c104631a.htm">Vi Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>