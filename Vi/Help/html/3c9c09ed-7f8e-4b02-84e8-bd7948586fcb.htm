<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Description</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="3c9c09ed-7f8e-4b02-84e8-bd7948586fcb" /><meta name="Description" content="LogDemo: The aim of this project is to show some simple solution to the problem of logging messages." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Help Document created with Sandcastle.<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="3c9c09ed-7f8e-4b02-84e8-bd7948586fcb.htm" title="Help Document created with Sandcastle." tocid="roottoc">Help Document created with Sandcastle.</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="3c9c09ed-7f8e-4b02-84e8-bd7948586fcb.htm" title="Description" tocid="3c9c09ed-7f8e-4b02-84e8-bd7948586fcb">Description</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="b082bfcb-a209-9ce6-a1a2-6fc7c104631a.htm" title="Vi" tocid="b082bfcb-a209-9ce6-a1a2-6fc7c104631a">Vi</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="8a6ed4ae-ab81-453e-90a0-844f77846502.htm" title="Vi.Log4Vi" tocid="8a6ed4ae-ab81-453e-90a0-844f77846502">Vi.Log4Vi</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Description</td></tr></table><span class="introStyle"></span><div class="introduction"><p><strong>LogDemo</strong>: The aim of this project is to show some simple solution to the problem of logging messages.
        </p><div class="mediaCenter"><img alt="Log Demo" src="../media/LogDemo.png" /><div class="caption"><span class="captionLead">Figure 1:
						</span>Layout of the running application.</div></div><p>
        At the foundation of the project there are:
      </p><div class="mediaCenter"><img alt="Logger Small" src="../media/LoggerSmall.png" /><div class="caption"><span class="captionLead">Figure 2:
						</span></div></div><div class="collapsibleAreaRegion" id="ViLogger"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vi.Logger</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAADACCAAA_tab1" class="codeSnippetContainerTabSingle">The method 'Vi.Logger'</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAADACCAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAADACCAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAADACCAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetLogger(Vi.ILog logger)
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    Vi.Logger._Logger = logger ?? <span class="highlight-keyword">new</span> FakeLog();
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAADACCAAA");</script><p>
            The staring point is the class 'Vi.Logger' that exposes the classic methods to log messages: <strong>Debug; Info; Warn; Error; Fatal</strong>, but none of these writes any message,
            The responsability of this class is to provide a fully featured architecture with:
            </p><ul><li><p><strong>overloads</strong>: all the methods have different signature with diferent set of parameters to choose from. There is also an 'embedded' Format method (like the String.Format). for example <em>Vi.Logger.Info().Format("Hello {0}", "Word")</em></p></li><li><p><strong>CompilerServices</strong>: all the mothods can trak info about the caller: <strong>file name</strong>; <strong>member name</strong>; <strong>line number</strong> (<em>In my experience this feature has proven to be VERY usefull, if not the most usefull.</em>)
              </p></li><li><p><strong>Abstraction</strong>: as said this class does not implement any 'log stategy'. This is the responsabilty of the object provided, as parameter, by the method 'SetLogger'. (<em>this makes the class easy to use and easy to change the way log are stored</em>.)
              </p></li><li><p><strong>Documentation</strong>: all methods are fully documented with summaries and help file. In that way <strong>intellisense</strong> and <strong>Help</strong> are enabled. This allows the use of the dll (instead of the code) which improves the <strong>standardization</strong>.
              </p></li><li><p><strong>public static</strong>: all the log methods are public static, then 'global' (to the solution) and 'ready to use'.
              </p></li></ul><p>
            Last but not least caracteristic is that, this 'architecture', wrapping the object provided as parameter, by the method 'SetLogger', makes not necessary 'to adorn' the latter with all the infrastructure that required by professional code. In other words, the object provided to the method 'SetLogger' is made to be used by the code (the Vi.logger' class) and not by the developers, so no any infrastructure is needed . To provide a good enough structure, isn't a challenging task but it is time-consuming. (<em>For example the class 'Vi.Logger' despite its simplicity takes more than 400 lines of code.</em>)
          </p></div><div class="collapsibleAreaRegion" id="ViLogger"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vi.ILog</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
            The only constraint for the object provided, as parameter, to the method 'Vi.Logger.SetLogger is that it must inherit from 'Vi.Ilog'. This is a way to implement the "dependency injection".

          </p></div><div class="collapsibleAreaRegion" id="Vi.List4Log"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vi.List4Log</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
            This class implements the user control used to show messages with a listView control.
          </p></div></div><div class="collapsibleAreaRegion" id="CodeExamples"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Code examples (excerpt from Form1)</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          The following code examples demonstarte how to use the Vi.Logger
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACABAAA_tab1" class="codeSnippetContainerTabSingle">Initialization.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// The base root for the log files.</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">string</span> root = AppDomain.CurrentDomain.BaseDirectory;
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// The static method 'Vi.Logger' can be used at any time, also before the method 'Vi.Logger.SetLogger' is called.</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// As soon as the Logger will be provide, the application will start to log.</span>
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>Vi.Logger.Info(<span class="highlight-literal">"No log will be written."</span>);
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create a new 'Logger': the object that 'writes' the messages.</span>
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">this</span>.Logger = <span class="highlight-keyword">new</span> Vi.Log4Vi.Logger(root, name: <span class="highlight-literal">"GUI"</span>, useTraceAppender: <span class="highlight-keyword">false</span>);
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// // Or use your own</span>
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//this.Logger = new Vi.Log4Net.Logger(Log);</span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Now it's time to decide where to send the message.</span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">this</span>.SetLogger(<span class="highlight-keyword">this</span>.Logger);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABABAAA_tab1" class="codeSnippetContainerTabSingle">How to set the preferred logger.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">/// Sets the specific logger based on the radio button selected by the user</span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">/// &lt;include file='XMLs/Form1.xml' path='Docs/method[@name="SetLogger"]/*' /&gt;</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> SetLogger(Vi.ILog logger)
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">if</span> (rdoList4Log.Checked)
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// The message goes to the text file and to the UserControl (this Form).</span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        List4Log1.SetLogger(logger);
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (rdoConsole4Log.Checked)
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// The message goes to the file and to the Console.</span>
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        Vi.Console4Log.SetLogger(logger);
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (rdoOnlyFile.Checked)
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// The message goes only to the file .</span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        Vi.Logger.SetLogger(logger);
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (rdoNoLog.Checked)
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        <span class="highlight-comment">// No message logged.</span>
<span class="highlight-lineno">25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>        Vi.Logger.SetLogger(<span class="highlight-keyword">null</span>);
<span class="highlight-lineno">26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    }
<span class="highlight-lineno">27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABAAA_tab1" class="codeSnippetContainerTabSingle">Show log files.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// 'this.Logger.Files' contains the full file name of each fileAppender (if any)</span>
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> file <span class="highlight-keyword">in</span> <span class="highlight-keyword">this</span>.Logger.Files)
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    ShowWithNotepad(file);
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAA");</script></div><div class="collapsibleAreaRegion" id="TheAdvantages"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The advantage this solution brings</span></div><div id="ID5RBSection" class="collapsibleSection"><ul><li><p><strong>Removes the dependency on the specific logging tool adopted</strong>: It is not necessary to know how the log is performed. The way logs are 'written' can change at any time (file system; event viewer; DB; ListView; Console; ...) .
            </p></li><li><p><strong>Sets a standard for the company</strong>: It is common experience that every developer has its own "style" when writes logs. This shouldn't happen (especially in a well structured company.)
            </p></li><li><p><strong>Simplicity</strong>: Log4Net is a very powerful tool: just 'plug and forget'. Its drawback is the 'configuration' (by my experience make it run is a nightmare.) This class removes this problem.
            </p></li><li><p>
              Easy to switch: The <strong>switch between the "destinations"</strong> (file system, Console, event log, DB, ... ) is very easy
            </p></li></ul></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>